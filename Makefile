# BalanceHub ‚Äî Make –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∏ Docker –∑–∞–ø—É—Å–∫–∞

.PHONY: help \
        local-env local-db-up local-wait-db local-migrate-init local-migrate local-up \
        docker-env docker-build docker-db-up docker-wait-db docker-migrate-init docker-migrate docker-up \
        docker-down

# –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å DC –Ω–∞ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–µ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è legacy docker-compose
# –ü—Ä–∏–º–µ—Ä: make docker-up DC=docker-compose
DC ?= docker compose
PY = poetry run

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º UID –∏ GID –¥–ª—è Docker
UID ?= $(shell id -u)
GID ?= $(shell id -g)

help:
	@echo "\nBalanceHub ‚Äî –∫–æ–º–∞–Ω–¥—ã Make"
	@echo "---------------------------------------"
	@echo "–õ–æ–∫–∞–ª—å–Ω—ã–π workflow:"
	@echo "  local-env         ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ .env.local"
	@echo "  local-db-up       ‚Äî –∑–∞–ø—É—Å–∫ PostgreSQL (Docker)"
	@echo "  local-wait-db     ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î"
	@echo "  local-migrate-init‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ init –º–∏–≥—Ä–∞—Ü–∏–∏"
	@echo "  local-migrate     ‚Äî –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"
	@echo "  local-up          ‚Äî –∑–∞–ø—É—Å–∫ API (–ø–æ–ª–Ω—ã–π workflow)"
	@echo ""
	@echo "Docker workflow:"
	@echo "  docker-env        ‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ .env.docker"
	@echo "  docker-build      ‚Äî —Å–±–æ—Ä–∫–∞ –æ–±—Ä–∞–∑–æ–≤"
	@echo "  docker-db-up      ‚Äî –∑–∞–ø—É—Å–∫ PostgreSQL"
	@echo "  docker-wait-db    ‚Äî –æ–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ë–î"
	@echo "  docker-migrate-init‚Äî —Å–æ–∑–¥–∞–Ω–∏–µ init –º–∏–≥—Ä–∞—Ü–∏–∏"
	@echo "  docker-migrate    ‚Äî –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π"
	@echo "  docker-up         ‚Äî –∑–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–ø–æ–ª–Ω—ã–π workflow)"
	@echo "  docker-down       ‚Äî –æ—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏ –æ—á–∏—Å—Ç–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤"

# ----------------------------
# –õ–æ–∫–∞–ª—å–Ω—ã–π (host) workflow
# ----------------------------

local-env:
	@echo "üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	@if [ ! -f .env.local ] && [ -f .env.local.example ]; then \
		echo "–°–æ–∑–¥–∞—é .env.local –∏–∑ .env.local.example"; \
		cp .env.local.example .env.local; \
	fi

local-db-up: local-env
	@echo "üóÑÔ∏è  –ó–∞–ø—É—Å–∫ PostgreSQL —á–µ—Ä–µ–∑ Docker..."
	$(DC) up -d db

local-db-down:
	@echo "üóÑÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL..."
	$(DC) down db

local-db-down-v:
	@echo "üóÑÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞ PostgreSQL..."
	$(DC) down -v db

local-wait-db: local-db-up
	@echo "‚è≥ –û–∂–∏–¥–∞—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."; \
	until $(DC) exec -T db pg_isready -U postgres >/dev/null 2>&1; do \
		sleep 1; \
	done; \
	echo "‚úÖ PostgreSQL –≥–æ—Ç–æ–≤"

local-migrate-init: local-wait-db
	@echo "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ init –º–∏–≥—Ä–∞—Ü–∏–∏..."
	@if [ -z "$(shell ls -A alembic/versions 2>/dev/null)" ]; then \
		echo "–°–æ–∑–¥–∞—é init –º–∏–≥—Ä–∞—Ü–∏—é..."; \
		$(PY) python scripts/create_init_migration.py; \
	else \
		echo "‚úÖ Init –º–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"; \
	fi

local-migrate: local-migrate-init
	@echo "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π..."
	$(PY) alembic upgrade head

local-migrate-down:
	@echo "üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π..."
	$(PY) alembic downgrade -1

local-up: local-migrate
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API..."
	poetry config virtualenvs.in-project true
	poetry config virtualenvs.create true
	poetry env use python3.10
	poetry install --no-interaction --no-ansi
	@echo "Swagger: http://127.0.0.1:8000/docs"
	$(PY) uvicorn app.main:app --host 127.0.0.1 --port 8000 --reload

local-seed: local-db-up local-migrate
	$(PY) python -m scripts.seed

local-logs-db:
	$(DC) logs -f db

# ----------------------------
# Docker workflow
# ----------------------------

docker-env:
	@echo "üê≥ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
	@if [ ! -f .env.docker ] && [ -f .env.docker.example ]; then \
		echo "–°–æ–∑–¥–∞—é .env.docker –∏–∑ .env.docker.example"; \
		cp .env.docker.example .env.docker; \
	fi

docker-build: docker-env
	@echo "üî® –°–±–æ—Ä–∫–∞ Docker –æ–±—Ä–∞–∑–æ–≤..."
	UID=$(UID) GID=$(GID) $(DC) build

docker-db-up: docker-build
	@echo "üóÑÔ∏è  –ó–∞–ø—É—Å–∫ PostgreSQL –≤ Docker..."
	$(DC) up -d db

docker-wait-db: docker-db-up
	@echo "‚è≥ –û–∂–∏–¥–∞—é –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ PostgreSQL..."; \
	until $(DC) exec -T db pg_isready -U postgres >/dev/null 2>&1; do \
		sleep 1; \
	done; \
	echo "‚úÖ PostgreSQL –≥–æ—Ç–æ–≤"

docker-migrate-init: docker-wait-db
	@echo "üìù –ü—Ä–æ–≤–µ—Ä–∫–∞ init –º–∏–≥—Ä–∞—Ü–∏–∏ –≤ Docker..."
	@if [ -z "$(shell ls -A alembic/versions 2>/dev/null)" ]; then \
		echo "–°–æ–∑–¥–∞—é init –º–∏–≥—Ä–∞—Ü–∏—é –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ..."; \
		$(DC) run --rm app python scripts/create_init_migration.py; \
	else \
		echo "‚úÖ Init –º–∏–≥—Ä–∞—Ü–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç"; \
	fi

docker-migrate: docker-migrate-init
	@echo "üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –º–∏–≥—Ä–∞—Ü–∏–π –≤ Docker..."
	$(DC) run --rm app alembic upgrade head

docker-migrate-down:
	@echo "üîÑ –û—Ç–∫–∞—Ç –º–∏–≥—Ä–∞—Ü–∏–π –≤ Docker..."
	$(DC) run --rm app alembic downgrade -1

docker-up: docker-migrate
	@echo "üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –≤ Docker..."
	UID=$(UID) GID=$(GID) $(DC) up -d app
	@echo "API:     http://localhost:8000"
	@echo "Swagger: http://localhost:8000/docs"

docker-down:
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤..."
	$(DC) down

docker-down-v:
	@echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ Docker —Å–µ—Ä–≤–∏—Å–æ–≤..."
	$(DC) down -v

docker-seed: docker-db-up docker-wait-db docker-migrate
	$(DC) run --rm app python -m scripts.seed

docker-logs-app:
	$(DC) logs -f app

docker-logs-db:
	$(DC) logs -f db
