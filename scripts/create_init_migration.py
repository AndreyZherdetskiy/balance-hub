#!/usr/bin/env python3
"""–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ —Å–æ–∑–¥–∞–Ω–∏—è init –º–∏–≥—Ä–∞—Ü–∏–∏.

–°–æ–∑–¥–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é init –º–∏–≥—Ä–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∏–º–ø–æ—Ä—Ç–∞–º–∏ –∏ —Ç–∏–ø–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö.
–†–∞–±–æ—Ç–∞–µ—Ç –∫–∞–∫ –ª–æ–∫–∞–ª—å–Ω–æ, —Ç–∞–∫ –∏ –≤ Docker –æ–∫—Ä—É–∂–µ–Ω–∏–∏.
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç autogenerate Alembic –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ö–µ–º—ã.
"""

import os
import sys
from pathlib import Path

from alembic import command
from alembic.config import Config

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞ –≤ PYTHONPATH
project_root = Path(__file__).parent.parent
sys.path.insert(0, str(project_root))


def create_init_migration():
    """–°–æ–∑–¥–∞–µ—Ç init –º–∏–≥—Ä–∞—Ü–∏—é —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏."""
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –æ–∫—Ä—É–∂–µ–Ω–∏–µ
    is_docker = os.path.exists("/.dockerenv") or os.environ.get("DOCKER_ENV") == "true"
    env_prefix = "üê≥" if is_docker else "üîß"

    print(
        f"{env_prefix} –°–æ–∑–¥–∞—é init –º–∏–≥—Ä–∞—Ü–∏—é –≤ {'Docker' if is_docker else '–ª–æ–∫–∞–ª—å–Ω–æ–º'} –æ–∫—Ä—É–∂–µ–Ω–∏–∏..."
    )

    # –ü—É—Ç—å –∫ alembic.ini
    alembic_cfg = Config(project_root / "alembic.ini")

    try:
        # –°–æ–∑–¥–∞–µ–º autogenerate –º–∏–≥—Ä–∞—Ü–∏—é
        command.revision(alembic_cfg, message="init_schema", autogenerate=True)
        print("‚úÖ Init –º–∏–≥—Ä–∞—Ü–∏—è —Å–æ–∑–¥–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")

        # –¢–µ–ø–µ—Ä—å –∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç—ã –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
        fix_migration_imports(is_docker)

    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)


def fix_migration_imports(is_docker):
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –∏–º–ø–æ—Ä—Ç—ã –≤ —Å–æ–∑–¥–∞–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏."""
    print("üîß –ò—Å–ø—Ä–∞–≤–ª—è—é –∏–º–ø–æ—Ä—Ç—ã –≤ –º–∏–≥—Ä–∞—Ü–∏–∏...")

    versions_dir = project_root / "alembic" / "versions"
    if not versions_dir.exists():
        print("‚ùå –î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è versions –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return

    # –ù–∞—Ö–æ–¥–∏–º —Å–∞–º—É—é –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é
    migration_files = list(versions_dir.glob("*.py"))
    if not migration_files:
        print("‚ùå –§–∞–π–ª—ã –º–∏–≥—Ä–∞—Ü–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return

    # –ë–µ—Ä–µ–º —Å–∞–º—É—é –Ω–æ–≤—É—é –º–∏–≥—Ä–∞—Ü–∏—é (–ø–æ –≤—Ä–µ–º–µ–Ω–∏ —Å–æ–∑–¥–∞–Ω–∏—è)
    latest_migration = max(migration_files, key=lambda x: x.stat().st_mtime)
    print(f"üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Ñ–∞–π–ª: {latest_migration.name}")

    # –ß–∏—Ç–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞
    content = latest_migration.read_text(encoding="utf-8")

    # –ó–∞–º–µ–Ω—è–µ–º –∏–º–ø–æ—Ä—Ç—ã
    if "from alembic import op" in content:
        # –î–æ–±–∞–≤–ª—è–µ–º –∏–º–ø–æ—Ä—Ç SafeMoney
        if "from app.db.types import SafeMoney" not in content:
            content = content.replace(
                "from alembic import op\nimport sqlalchemy as sa",
                "from alembic import op\nimport sqlalchemy as sa\nfrom app.db.types import SafeMoney",
            )

        # –ó–∞–º–µ–Ω—è–µ–º –≤—Å–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è app.db.types.SafeMoney –Ω–∞ SafeMoney
        content = content.replace("app.db.types.SafeMoney()", "SafeMoney()")

        # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
        latest_migration.write_text(content, encoding="utf-8")
        print("‚úÖ –ò–º–ø–æ—Ä—Ç—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")

        # –í Docker —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –ø—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞
        if is_docker:
            os.chmod(latest_migration, 0o666)
            print("‚úÖ –ü—Ä–∞–≤–∞ –¥–æ—Å—Ç—É–ø–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã!")
    else:
        print("‚ö†Ô∏è  –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ñ–∞–π–ª–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è, –ø—Ä–æ–ø—É—Å–∫–∞—é –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ")


if __name__ == "__main__":
    create_init_migration()
